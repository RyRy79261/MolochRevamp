/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MolochInterface extends ethers.utils.Interface {
  functions: {
    "proposals(uint256)": FunctionFragment;
    "processingReward()": FunctionFragment;
    "getMemberProposalVote(address,uint256)": FunctionFragment;
    "getCurrentPeriod()": FunctionFragment;
    "members(address)": FunctionFragment;
    "withdrawBalance(address,uint256)": FunctionFragment;
    "submitGuildKickProposal(address,string)": FunctionFragment;
    "ragequit(uint256,uint256)": FunctionFragment;
    "approvedTokens(uint256)": FunctionFragment;
    "updateDelegateKey(address)": FunctionFragment;
    "TOTAL()": FunctionFragment;
    "processWhitelistProposal(uint256)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "proposalQueue(uint256)": FunctionFragment;
    "proposedToKick(address)": FunctionFragment;
    "memberAddressByDelegateKey(address)": FunctionFragment;
    "withdrawBalances(address[],uint256[],bool)": FunctionFragment;
    "userTokenBalances(address,address)": FunctionFragment;
    "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)": FunctionFragment;
    "collectTokens(address)": FunctionFragment;
    "totalLoot()": FunctionFragment;
    "gracePeriodLength()": FunctionFragment;
    "getUserTokenBalance(address,address)": FunctionFragment;
    "tokenWhitelist(address)": FunctionFragment;
    "getTokenCount()": FunctionFragment;
    "getProposalQueueLength()": FunctionFragment;
    "summoningTime()": FunctionFragment;
    "votingPeriodLength()": FunctionFragment;
    "proposalDeposit()": FunctionFragment;
    "hasVotingPeriodExpired(uint256)": FunctionFragment;
    "sponsorProposal(uint256)": FunctionFragment;
    "submitVote(uint256,uint8)": FunctionFragment;
    "totalGuildBankTokens()": FunctionFragment;
    "canRagequit(uint256)": FunctionFragment;
    "dilutionBound()": FunctionFragment;
    "getProposalFlags(uint256)": FunctionFragment;
    "periodDuration()": FunctionFragment;
    "depositToken()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "ragekick(address)": FunctionFragment;
    "cancelProposal(uint256)": FunctionFragment;
    "proposedToWhitelist(address)": FunctionFragment;
    "processGuildKickProposal(uint256)": FunctionFragment;
    "processProposal(uint256)": FunctionFragment;
    "ESCROW()": FunctionFragment;
    "GUILD()": FunctionFragment;
    "submitWhitelistProposal(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processingReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberProposalVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGuildKickProposal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ragequit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegateKey",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "TOTAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processWhitelistProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedToKick",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "memberAddressByDelegateKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalances",
    values: [string[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalLoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gracePeriodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalQueueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "summoningTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotingPeriodExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGuildBankTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canRagequit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dilutionBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalFlags",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ragekick", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "processGuildKickProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ESCROW", values?: undefined): string;
  encodeFunctionData(functionFragment: "GUILD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitWhitelistProposal",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberProposalVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGuildKickProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragequit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOTAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processWhitelistProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedToKick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberAddressByDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalLoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalQueueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summoningTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotingPeriodExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalGuildBankTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canRagequit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dilutionBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragekick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processGuildKickProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ESCROW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GUILD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitWhitelistProposal",
    data: BytesLike
  ): Result;

  events: {
    "SummonComplete(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SubmitProposal(address,uint256,uint256,uint256,address,uint256,address,string,bool[6],uint256,address,address)": EventFragment;
    "SponsorProposal(address,address,uint256,uint256,uint256)": EventFragment;
    "SubmitVote(uint256,uint256,address,address,uint8)": EventFragment;
    "ProcessProposal(uint256,uint256,bool)": EventFragment;
    "ProcessWhitelistProposal(uint256,uint256,bool)": EventFragment;
    "ProcessGuildKickProposal(uint256,uint256,bool)": EventFragment;
    "Ragequit(address,uint256,uint256)": EventFragment;
    "TokensCollected(address,uint256)": EventFragment;
    "CancelProposal(uint256,address)": EventFragment;
    "UpdateDelegateKey(address,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SummonComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsorProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessWhitelistProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessGuildKickProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ragequit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDelegateKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type SummonCompleteEvent = TypedEvent<
  [
    string,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    summoner: string;
    tokens: string[];
    summoningTime: BigNumber;
    periodDuration: BigNumber;
    votingPeriodLength: BigNumber;
    gracePeriodLength: BigNumber;
    proposalDeposit: BigNumber;
    dilutionBound: BigNumber;
    processingReward: BigNumber;
  }
>;

export type SubmitProposalEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    [boolean, boolean, boolean, boolean, boolean, boolean],
    BigNumber,
    string,
    string
  ] & {
    applicant: string;
    sharesRequested: BigNumber;
    lootRequested: BigNumber;
    tributeOffered: BigNumber;
    tributeToken: string;
    paymentRequested: BigNumber;
    paymentToken: string;
    details: string;
    flags: [boolean, boolean, boolean, boolean, boolean, boolean];
    proposalId: BigNumber;
    delegateKey: string;
    memberAddress: string;
  }
>;

export type SponsorProposalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    delegateKey: string;
    memberAddress: string;
    proposalId: BigNumber;
    proposalIndex: BigNumber;
    startingPeriod: BigNumber;
  }
>;

export type SubmitVoteEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, number] & {
    proposalId: BigNumber;
    proposalIndex: BigNumber;
    delegateKey: string;
    memberAddress: string;
    uintVote: number;
  }
>;

export type ProcessProposalEvent = TypedEvent<
  [BigNumber, BigNumber, boolean] & {
    proposalIndex: BigNumber;
    proposalId: BigNumber;
    didPass: boolean;
  }
>;

export type ProcessWhitelistProposalEvent = TypedEvent<
  [BigNumber, BigNumber, boolean] & {
    proposalIndex: BigNumber;
    proposalId: BigNumber;
    didPass: boolean;
  }
>;

export type ProcessGuildKickProposalEvent = TypedEvent<
  [BigNumber, BigNumber, boolean] & {
    proposalIndex: BigNumber;
    proposalId: BigNumber;
    didPass: boolean;
  }
>;

export type RagequitEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    memberAddress: string;
    sharesToBurn: BigNumber;
    lootToBurn: BigNumber;
  }
>;

export type TokensCollectedEvent = TypedEvent<
  [string, BigNumber] & { token: string; amountToCollect: BigNumber }
>;

export type CancelProposalEvent = TypedEvent<
  [BigNumber, string] & { proposalId: BigNumber; applicantAddress: string }
>;

export type UpdateDelegateKeyEvent = TypedEvent<
  [string, string] & { memberAddress: string; newDelegateKey: string }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    memberAddress: string;
    token: string;
    amount: BigNumber;
  }
>;

export class Moloch extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MolochInterface;

  functions: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        applicant: string;
        proposer: string;
        sponsor: string;
        sharesRequested: BigNumber;
        lootRequested: BigNumber;
        tributeOffered: BigNumber;
        tributeToken: string;
        paymentRequested: BigNumber;
        paymentToken: string;
        startingPeriod: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        details: string;
        maxTotalSharesAndLootAtYesVote: BigNumber;
      }
    >;

    processingReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
        delegateKey: string;
        shares: BigNumber;
        loot: BigNumber;
        exists: boolean;
        highestIndexYesVote: BigNumber;
        jailed: BigNumber;
      }
    >;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TOTAL(overrides?: CallOverrides): Promise<[string]>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposedToKick(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalLoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    gracePeriodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    summoningTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalGuildBankTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dilutionBound(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, boolean, boolean, boolean, boolean, boolean]]>;

    periodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    ragekick(
      memberToKick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ESCROW(overrides?: CallOverrides): Promise<[string]>;

    GUILD(overrides?: CallOverrides): Promise<[string]>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      applicant: string;
      proposer: string;
      sponsor: string;
      sharesRequested: BigNumber;
      lootRequested: BigNumber;
      tributeOffered: BigNumber;
      tributeToken: string;
      paymentRequested: BigNumber;
      paymentToken: string;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      details: string;
      maxTotalSharesAndLootAtYesVote: BigNumber;
    }
  >;

  processingReward(overrides?: CallOverrides): Promise<BigNumber>;

  getMemberProposalVote(
    memberAddress: string,
    proposalIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
      delegateKey: string;
      shares: BigNumber;
      loot: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      jailed: BigNumber;
    }
  >;

  withdrawBalance(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitGuildKickProposal(
    memberToKick: string,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ragequit(
    sharesToBurn: BigNumberish,
    lootToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateDelegateKey(
    newDelegateKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TOTAL(overrides?: CallOverrides): Promise<string>;

  processWhitelistProposal(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  proposalQueue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposedToKick(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  memberAddressByDelegateKey(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawBalances(
    tokens: string[],
    amounts: BigNumberish[],
    max: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userTokenBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  submitProposal(
    applicant: string,
    sharesRequested: BigNumberish,
    lootRequested: BigNumberish,
    tributeOffered: BigNumberish,
    tributeToken: string,
    paymentRequested: BigNumberish,
    paymentToken: string,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectTokens(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

  gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

  getUserTokenBalance(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

  summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

  proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  hasVotingPeriodExpired(
    startingPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sponsorProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitVote(
    proposalIndex: BigNumberish,
    uintVote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalGuildBankTokens(overrides?: CallOverrides): Promise<BigNumber>;

  canRagequit(
    highestIndexYesVote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

  getProposalFlags(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

  periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  ragekick(
    memberToKick: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedToWhitelist(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  processGuildKickProposal(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processProposal(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ESCROW(overrides?: CallOverrides): Promise<string>;

  GUILD(overrides?: CallOverrides): Promise<string>;

  submitWhitelistProposal(
    tokenToWhitelist: string,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        applicant: string;
        proposer: string;
        sponsor: string;
        sharesRequested: BigNumber;
        lootRequested: BigNumber;
        tributeOffered: BigNumber;
        tributeToken: string;
        paymentRequested: BigNumber;
        paymentToken: string;
        startingPeriod: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        details: string;
        maxTotalSharesAndLootAtYesVote: BigNumber;
      }
    >;

    processingReward(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
        delegateKey: string;
        shares: BigNumber;
        loot: BigNumber;
        exists: boolean;
        highestIndexYesVote: BigNumber;
        jailed: BigNumber;
      }
    >;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    TOTAL(overrides?: CallOverrides): Promise<string>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedToKick(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectTokens(token: string, overrides?: CallOverrides): Promise<void>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalGuildBankTokens(overrides?: CallOverrides): Promise<BigNumber>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    ragekick(memberToKick: string, overrides?: CallOverrides): Promise<void>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ESCROW(overrides?: CallOverrides): Promise<string>;

    GUILD(overrides?: CallOverrides): Promise<string>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "SummonComplete(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      summoner?: string | null,
      tokens?: null,
      summoningTime?: null,
      periodDuration?: null,
      votingPeriodLength?: null,
      gracePeriodLength?: null,
      proposalDeposit?: null,
      dilutionBound?: null,
      processingReward?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        summoner: string;
        tokens: string[];
        summoningTime: BigNumber;
        periodDuration: BigNumber;
        votingPeriodLength: BigNumber;
        gracePeriodLength: BigNumber;
        proposalDeposit: BigNumber;
        dilutionBound: BigNumber;
        processingReward: BigNumber;
      }
    >;

    SummonComplete(
      summoner?: string | null,
      tokens?: null,
      summoningTime?: null,
      periodDuration?: null,
      votingPeriodLength?: null,
      gracePeriodLength?: null,
      proposalDeposit?: null,
      dilutionBound?: null,
      processingReward?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        summoner: string;
        tokens: string[];
        summoningTime: BigNumber;
        periodDuration: BigNumber;
        votingPeriodLength: BigNumber;
        gracePeriodLength: BigNumber;
        proposalDeposit: BigNumber;
        dilutionBound: BigNumber;
        processingReward: BigNumber;
      }
    >;

    "SubmitProposal(address,uint256,uint256,uint256,address,uint256,address,string,bool[6],uint256,address,address)"(
      applicant?: string | null,
      sharesRequested?: null,
      lootRequested?: null,
      tributeOffered?: null,
      tributeToken?: null,
      paymentRequested?: null,
      paymentToken?: null,
      details?: null,
      flags?: null,
      proposalId?: null,
      delegateKey?: string | null,
      memberAddress?: string | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        [boolean, boolean, boolean, boolean, boolean, boolean],
        BigNumber,
        string,
        string
      ],
      {
        applicant: string;
        sharesRequested: BigNumber;
        lootRequested: BigNumber;
        tributeOffered: BigNumber;
        tributeToken: string;
        paymentRequested: BigNumber;
        paymentToken: string;
        details: string;
        flags: [boolean, boolean, boolean, boolean, boolean, boolean];
        proposalId: BigNumber;
        delegateKey: string;
        memberAddress: string;
      }
    >;

    SubmitProposal(
      applicant?: string | null,
      sharesRequested?: null,
      lootRequested?: null,
      tributeOffered?: null,
      tributeToken?: null,
      paymentRequested?: null,
      paymentToken?: null,
      details?: null,
      flags?: null,
      proposalId?: null,
      delegateKey?: string | null,
      memberAddress?: string | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        [boolean, boolean, boolean, boolean, boolean, boolean],
        BigNumber,
        string,
        string
      ],
      {
        applicant: string;
        sharesRequested: BigNumber;
        lootRequested: BigNumber;
        tributeOffered: BigNumber;
        tributeToken: string;
        paymentRequested: BigNumber;
        paymentToken: string;
        details: string;
        flags: [boolean, boolean, boolean, boolean, boolean, boolean];
        proposalId: BigNumber;
        delegateKey: string;
        memberAddress: string;
      }
    >;

    "SponsorProposal(address,address,uint256,uint256,uint256)"(
      delegateKey?: string | null,
      memberAddress?: string | null,
      proposalId?: null,
      proposalIndex?: null,
      startingPeriod?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        delegateKey: string;
        memberAddress: string;
        proposalId: BigNumber;
        proposalIndex: BigNumber;
        startingPeriod: BigNumber;
      }
    >;

    SponsorProposal(
      delegateKey?: string | null,
      memberAddress?: string | null,
      proposalId?: null,
      proposalIndex?: null,
      startingPeriod?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        delegateKey: string;
        memberAddress: string;
        proposalId: BigNumber;
        proposalIndex: BigNumber;
        startingPeriod: BigNumber;
      }
    >;

    "SubmitVote(uint256,uint256,address,address,uint8)"(
      proposalId?: null,
      proposalIndex?: BigNumberish | null,
      delegateKey?: string | null,
      memberAddress?: string | null,
      uintVote?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, number],
      {
        proposalId: BigNumber;
        proposalIndex: BigNumber;
        delegateKey: string;
        memberAddress: string;
        uintVote: number;
      }
    >;

    SubmitVote(
      proposalId?: null,
      proposalIndex?: BigNumberish | null,
      delegateKey?: string | null,
      memberAddress?: string | null,
      uintVote?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, number],
      {
        proposalId: BigNumber;
        proposalIndex: BigNumber;
        delegateKey: string;
        memberAddress: string;
        uintVote: number;
      }
    >;

    "ProcessProposal(uint256,uint256,bool)"(
      proposalIndex?: BigNumberish | null,
      proposalId?: BigNumberish | null,
      didPass?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { proposalIndex: BigNumber; proposalId: BigNumber; didPass: boolean }
    >;

    ProcessProposal(
      proposalIndex?: BigNumberish | null,
      proposalId?: BigNumberish | null,
      didPass?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { proposalIndex: BigNumber; proposalId: BigNumber; didPass: boolean }
    >;

    "ProcessWhitelistProposal(uint256,uint256,bool)"(
      proposalIndex?: BigNumberish | null,
      proposalId?: BigNumberish | null,
      didPass?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { proposalIndex: BigNumber; proposalId: BigNumber; didPass: boolean }
    >;

    ProcessWhitelistProposal(
      proposalIndex?: BigNumberish | null,
      proposalId?: BigNumberish | null,
      didPass?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { proposalIndex: BigNumber; proposalId: BigNumber; didPass: boolean }
    >;

    "ProcessGuildKickProposal(uint256,uint256,bool)"(
      proposalIndex?: BigNumberish | null,
      proposalId?: BigNumberish | null,
      didPass?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { proposalIndex: BigNumber; proposalId: BigNumber; didPass: boolean }
    >;

    ProcessGuildKickProposal(
      proposalIndex?: BigNumberish | null,
      proposalId?: BigNumberish | null,
      didPass?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { proposalIndex: BigNumber; proposalId: BigNumber; didPass: boolean }
    >;

    "Ragequit(address,uint256,uint256)"(
      memberAddress?: string | null,
      sharesToBurn?: null,
      lootToBurn?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { memberAddress: string; sharesToBurn: BigNumber; lootToBurn: BigNumber }
    >;

    Ragequit(
      memberAddress?: string | null,
      sharesToBurn?: null,
      lootToBurn?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { memberAddress: string; sharesToBurn: BigNumber; lootToBurn: BigNumber }
    >;

    "TokensCollected(address,uint256)"(
      token?: string | null,
      amountToCollect?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amountToCollect: BigNumber }
    >;

    TokensCollected(
      token?: string | null,
      amountToCollect?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amountToCollect: BigNumber }
    >;

    "CancelProposal(uint256,address)"(
      proposalId?: BigNumberish | null,
      applicantAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; applicantAddress: string }
    >;

    CancelProposal(
      proposalId?: BigNumberish | null,
      applicantAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; applicantAddress: string }
    >;

    "UpdateDelegateKey(address,address)"(
      memberAddress?: string | null,
      newDelegateKey?: null
    ): TypedEventFilter<
      [string, string],
      { memberAddress: string; newDelegateKey: string }
    >;

    UpdateDelegateKey(
      memberAddress?: string | null,
      newDelegateKey?: null
    ): TypedEventFilter<
      [string, string],
      { memberAddress: string; newDelegateKey: string }
    >;

    "Withdraw(address,address,uint256)"(
      memberAddress?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { memberAddress: string; token: string; amount: BigNumber }
    >;

    Withdraw(
      memberAddress?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { memberAddress: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processingReward(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TOTAL(overrides?: CallOverrides): Promise<BigNumber>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedToKick(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalGuildBankTokens(overrides?: CallOverrides): Promise<BigNumber>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    ragekick(
      memberToKick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ESCROW(overrides?: CallOverrides): Promise<BigNumber>;

    GUILD(overrides?: CallOverrides): Promise<BigNumber>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processingReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TOTAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedToKick(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalLoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gracePeriodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalQueueLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    summoningTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriodLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalGuildBankTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dilutionBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ragekick(
      memberToKick: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ESCROW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUILD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
