/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SubmitterInterface extends ethers.utils.Interface {
  functions: {
    "submitGuildKickProposal(address,string)": FunctionFragment;
    "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)": FunctionFragment;
    "moloch()": FunctionFragment;
    "submitWhitelistProposal(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "submitGuildKickProposal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "moloch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitWhitelistProposal",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "submitGuildKickProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moloch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitWhitelistProposal",
    data: BytesLike
  ): Result;

  events: {
    "Submit(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Submit"): EventFragment;
}

export type SubmitEvent = TypedEvent<[BigNumber] & { proposalId: BigNumber }>;

export class Submitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SubmitterInterface;

  functions: {
    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moloch(overrides?: CallOverrides): Promise<[string]>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  submitGuildKickProposal(
    memberToKick: string,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitProposal(
    applicant: string,
    sharesRequested: BigNumberish,
    lootRequested: BigNumberish,
    tributeOffered: BigNumberish,
    tributeToken: string,
    paymentRequested: BigNumberish,
    paymentToken: string,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moloch(overrides?: CallOverrides): Promise<string>;

  submitWhitelistProposal(
    tokenToWhitelist: string,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<void>;

    moloch(overrides?: CallOverrides): Promise<string>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Submit(uint256)"(
      proposalId?: null
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;

    Submit(
      proposalId?: null
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;
  };

  estimateGas: {
    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moloch(overrides?: CallOverrides): Promise<BigNumber>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moloch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
