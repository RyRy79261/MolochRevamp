/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MolochSummonerInterface extends ethers.utils.Interface {
  functions: {
    "getMolochCount()": FunctionFragment;
    "summonMoloch(address,address[],uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "Molochs(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getMolochCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "summonMoloch",
    values: [
      string,
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "Molochs",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMolochCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonMoloch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Molochs", data: BytesLike): Result;

  events: {
    "Summoned(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Summoned"): EventFragment;
}

export type SummonedEvent = TypedEvent<
  [string, string] & { M: string; _summoner: string }
>;

export class MolochSummoner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MolochSummonerInterface;

  functions: {
    getMolochCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { MolochCount: BigNumber }>;

    summonMoloch(
      _summoner: string,
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Molochs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  getMolochCount(overrides?: CallOverrides): Promise<BigNumber>;

  summonMoloch(
    _summoner: string,
    _approvedTokens: string[],
    _periodDuration: BigNumberish,
    _votingPeriodLength: BigNumberish,
    _gracePeriodLength: BigNumberish,
    _proposalDeposit: BigNumberish,
    _dilutionBound: BigNumberish,
    _processingReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Molochs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getMolochCount(overrides?: CallOverrides): Promise<BigNumber>;

    summonMoloch(
      _summoner: string,
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    Molochs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Summoned(address,address)"(
      M?: string | null,
      _summoner?: string | null
    ): TypedEventFilter<[string, string], { M: string; _summoner: string }>;

    Summoned(
      M?: string | null,
      _summoner?: string | null
    ): TypedEventFilter<[string, string], { M: string; _summoner: string }>;
  };

  estimateGas: {
    getMolochCount(overrides?: CallOverrides): Promise<BigNumber>;

    summonMoloch(
      _summoner: string,
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Molochs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getMolochCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    summonMoloch(
      _summoner: string,
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Molochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
